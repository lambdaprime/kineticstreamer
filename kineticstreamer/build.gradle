plugins {
    id 'java'
}

apply plugin : 'eclipse'

dependencies {
   implementation 'io.github.lambdaprime:id.xfunction:14.0'

   // transitively export following dependency to tests project
   apiElements 'io.github.lambdaprime:id.xfunction:14.0'
}

sourceCompatibility = '11'
targetCompatibility = '11'

java {
    modularity.inferModulePath = true
}

javadoc {
    options.noTimestamp = true;
    options.noQualifiers = ["all"];
    options.noTree = true;
    options.noIndex = true;
    options.noNavBar = true;
    options.overview = "src/overview.html";
}

def packageDir = "$buildDir/package/${projectName}"

task createRelease(type: Zip) {
    archiveFileName = "$releaseFileName"
    destinationDirectory = file("$projectDir/release")
    from file("$packageDir/..")
}

task copyLibs(type: Copy) {
    from configurations.runtimeClasspath
    from jar.archiveFile
    into "${packageDir}/libs"
}

task createPackage(type: Copy, dependsOn: copyLibs) {
    from "${project.rootDir}/README.md"
    from "${project.rootDir}/LICENSE-2.0.txt"
    into packageDir
}

task cleanRelease(type: Delete) {
    delete "$packageDir"
    delete "$projectDir/release"
}

createRelease.dependsOn createPackage
assemble.dependsOn createRelease
clean.dependsOn cleanRelease

task updateVersion() {
    if (version.contains("SNAPSHOT")) return;
    println "Updating version to " + version
    new id.xfunction.text.Substitutor()
        .withRegexpSupport()
        .substitute(java.nio.file.Paths.get("${project.rootDir}/README.md"), Map.of(
            "io.github.lambdaprime:kineticstreamer:[0-9.]+", "io.github.lambdaprime:kineticstreamer:" + version
        ));
}

createPackage.dependsOn updateVersion

if (project.hasProperty('publish')) {

  // Initially it was taken from https://central.sonatype.org/publish/publish-gradle/
  // but since Gradle removed this plugin https://docs.gradle.org/7.0/userguide/upgrading_version_6.html#removal_of_the_legacy_maven_plugin
  // it was rewritten for new one

  task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from "README-javadoc.txt"
  }

  task sourcesJar(type: Jar) {
    archiveClassifier = 'sources'
    from "README-sources.txt"
  }

  java {
    withJavadocJar()
    withSourcesJar()
  }

  apply plugin: 'maven-publish'

  publishing {
    publications {
      mavenJava(MavenPublication) {
        artifactId = 'kineticstreamer'
        groupId = 'io.github.lambdaprime'
        from components.java
        pom {
          name = 'kineticstreamer'
          description = 'Java module to do (de)serialization of Java objects into streams'
          url = 'https://github.com/lambdaprime/kineticstreamer'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            }
          }

          developers {
            developer {
              id = 'lambdaprime'
              email = 'intid@protonmail.com'
            }
          }

          scm {
            url = 'https://github.com/lambdaprime/kineticstreamer'
          }
        }
      }
    }
    repositories {
      maven {
        credentials {
          username ossrhUsername
          password ossrhPassword
        }
        url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
      }
    }    
  }

  if (project.hasProperty('signing.secretKeyRingFile')) {
    apply plugin: 'signing'

    signing {
      sign publishing.publications.mavenJava
    }
  }
}
